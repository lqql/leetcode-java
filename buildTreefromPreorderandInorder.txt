/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder==null||inorder==null||preorder.length==0||inorder.length==0)
            return null;
        for(int i=0;i<inorder.length;i++)
            map.put(inorder[i],i);
        return build(preorder,0,preorder.length-1,inorder,0,inorder.length-1);
    }
    TreeNode build(int[] preorder,int pre_start,int pre_end, int[] inorder,int in_start,int in_end){
        if(pre_start>pre_end||in_start>in_end)
            return null;
        TreeNode root = new TreeNode(preorder[pre_start]);
        int mid = map.get(preorder[pre_start]);
        int num=mid-in_start;
        root.left=build(preorder,pre_start+1,pre_start+num,inorder,in_start,mid-1);
        root.right=build(preorder,pre_start+num+1,pre_end,inorder,mid+1,in_end);
        return root;
    }
}